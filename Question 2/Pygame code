import os
import math

# try to open pygame
try:
    import pygame
except ImportError:  # if pygame is not installed, install it then open it
    import subprocess
    import sys
    subprocess.check_call([sys.executable, "-m", "pip", "install", "pygame"])
    import pygame

pygame.init()

SCREEN_WIDTH = 800
SCREEN_HEIGHT = int(SCREEN_WIDTH * 0.8)

screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption('Game')

clock = pygame.time.Clock()
FPS = 60

#define game variables
GRAVITY = 0.75
TILE_SIZE = 40

#define player action variables
left = False
right = False
shoot = False
grenade = False
grenade_thrown = False

#load images
#bullet
bullet_img = pygame.image.load('Question 2/img/icons/bullet.png').convert_alpha()
#grenade
grenade_img = pygame.image.load('Question 2/img/icons/grenade.png').convert_alpha()
#pick up boxes
health_box_image = pygame.image.load('Question 2/img/icons/health_box.png').convert_alpha()
ammo_box_image = pygame.image.load('Question 2/img/icons/ammo_box.png').convert_alpha()
grenade_box_image = pygame.image.load('Question 2/img/icons/grenade_box.png').convert_alpha()
item_boxes = {
    'Health' : health_box_image,
    'Ammo' : ammo_box_image,
    'Grenade' : grenade_box_image
    }

BG = (144, 201, 120)
RED = (255, 0, 0)


def draw_bg():
    screen.fill(BG)
    pygame.draw.line(screen, RED, (0, 300), (SCREEN_WIDTH, 300))



class Soldier(pygame.sprite.Sprite):
    def __init__(self, char_type, x, y, scale, speed, ammo, grenades):
        pygame.sprite.Sprite.__init__(self)
        self.alive = True
        self.char_type = char_type
        self.speed = speed
        self.ammo = ammo
        self.start_ammo = ammo
        self.shoot_cooldown = 0
        self.grenades = grenades
        self.health = 100
        self.max_health = self.health
        self.direction = 1
        self.vel_y = 0
        self.jump = False
        self.in_air = True
        self.flip = False
        self.animation_list = []
        self.frame_index = 0
        self.action = 0
        self.update_time = pygame.time.get_ticks()

        #load all images
        animation_types = ['idle', 'run', 'jump', 'death']
        for animation in animation_types:
            temp_list = []
            num_of_frames = len(os.listdir(f'Question 2/img/{self.char_type}/{animation}'))
            for i in range(num_of_frames):
                img = pygame.image.load(f'Question 2/img/{self.char_type}/{animation}/{i}.png').convert_alpha()
                img = pygame.transform.scale(img, (int(img.get_width() * scale), int(img.get_height() * scale)))
                temp_list.append(img)
            self.animation_list.append(temp_list)

        self.image = self.animation_list[self.action][self.frame_index]
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)

    def update(self):
        self.update_animation()
        self.check_alive()
        if self.shoot_cooldown > 0:
            self.shoot_cooldown -= 1

    def move(self, left, right):
        #reset movement at the start of each frame (otherwise character would move constantly until the direction was changed)
        dx = 0
        dy = 0

        if left:
            dx = -self.speed
            self.flip = True
            self.direction = -1
        if right:
            dx = self.speed
            self.flip = False
            self.direction = 1

        #jump
        if self.jump and not self.in_air:
            self.vel_y = -15
            self.jump = False
            self.in_air = True

        #apply gravity
        self.vel_y += GRAVITY
        if self.vel_y > 10:
            self.vel_y = 10

        dy += self.vel_y

        #check collision with floor
        if self.rect.bottom + dy > 300:
            dy = 300 - self.rect.bottom
            self.in_air = False

        self.rect.x += dx
        self.rect.y += dy

    def shoot(self):
        if self.shoot_cooldown == 0 and self.ammo > 0:
            self.shoot_cooldown = 8
            bullet = Bullet(self.rect.centerx + (0.6 * self.rect.size[0] * self.direction), self.rect.centery, self.direction)
            bullet_group.add(bullet)
            self.ammo -= 1

    def update_animation(self):
        #update animation
        ANIMATION_COOLDOWN = 100
        #update image depending on current frame
        self.image = self.animation_list[self.action][self.frame_index]
        #check if enough time has passed since last update
        if pygame.time.get_ticks() - self.update_time > ANIMATION_COOLDOWN:
            self.update_time = pygame.time.get_ticks()
            self.frame_index += 1
        if self.frame_index >= len(self.animation_list[self.action]):
            if self.action == 3:
                self.frame_index = len(self.animation_list[self.action]) - 1
            else:
                self.frame_index = 0

    def update_action(self, new_action):
        #check if new action is different to previous
        if new_action != self.action:
            self.action = new_action
            #update the animation settings
            self.frame_index = 0
            self.update_time = pygame.time.get_ticks()

    def check_alive(self):
        if self.health <=0:
            self.health = 0 
            self.speed = 0
            self.alive = False
            self.update_action(3)

    def draw(self):
        screen.blit(pygame.transform.flip(self.image, self.flip, False), self.rect)

class ItemBox(pygame.sprite.Sprite): 
    def __init__(self, item_type, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.item_type = item_type
        self.image = item_boxes[self.item_type]
        self.rect= self.image.get_rect()
        self.rect.midtop = (x+TILE_SIZE //2, y+(TILE_SIZE - self.image.get_height()))
        
    def update(self):
        #collision with player
        if pygame.sprite.collide_rect(self, player):
            #check which box
            if self.item_type == 'Health':
                player.health += 25
                if player.health >player.max_health:
                    player.health = player.max_health
            elif self.item_type == 'Ammo':
                player.ammo += 15
            elif self.item_type == 'Grenade':
                player.grenades += 3
            
            self.kill()
            

class Bullet(pygame.sprite.Sprite): #sniper upgrade? different guns for each level?
    def __init__(self, x, y, direction):
        pygame.sprite.Sprite.__init__(self)
        self.speed = 20
        self.image = bullet_img
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.direction = direction

    def update(self):
        self.rect.x += (self.direction * self.speed)
        
        #check if bullet is out of bounds
        if self.rect.right < 0 or self.rect.left > SCREEN_WIDTH:
            self.kill()

        #check collision with player
        if pygame.sprite.spritecollide(player, bullet_group, False):
            if player.alive:
                player.health -= 10
                self.kill()

        #check collision with enemy
        for enemy in enemy_group:
            if pygame.sprite.spritecollide(enemy, bullet_group, False):
                if enemy.alive:
                    enemy.health -= 25
                    self.kill()

class Grenade(pygame.sprite.Sprite): #get the grenade throwing movement dependant on the players movement?? get the grenade to roll?
    def __init__(self, x, y, direction):
        pygame.sprite.Sprite.__init__(self)
        self.timer = 100
        self.vel_y = -11
        self.speed = 6
        self.image = grenade_img
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.direction = direction
        
    def update(self):
        self.vel_y += GRAVITY
        dx = self.direction * self.speed
        dy = self.vel_y

         #check collision with floor
        if self.rect.bottom + dy > 300:
            dy = 300 - self.rect.bottom 
            #grenade bounce
            if self.speed>0:  
                self.speed *= 0.65
            self.vel_y *= -0.5
            
        #check if grenade is out of bounds
        if self.rect.left+dx < 0 or self.rect.right +dx > SCREEN_WIDTH:
            self.direction *=-1
            dx = self.direction * self.speed

        #change grenade location
        self.rect.x += dx
        self.rect.y += dy
        
        #count down timer
        self.timer -= 1
        if self.timer <= 0:
            self.kill()
            explosion = Explosion(self.rect.x, self.rect.y, 0.5)
            explosion_group.add(explosion)
            #damage to enemy and player
            self.player_distance = int(math.sqrt((pow((self.rect.centerx - player.rect.centerx),2) + pow((self.rect.centery - player.rect.centery),2)))) 
            if  self.player_distance < TILE_SIZE * 4:
                player.health -= TILE_SIZE * 4 - self.player_distance
            for enemy in enemy_group:
                self.enemy_distance = int(math.sqrt((pow((self.rect.centerx - enemy.rect.centerx),2) + pow((self.rect.centery - enemy.rect.centery),2)))) 
                if  self.enemy_distance < TILE_SIZE * 4:
                    enemy.health -= TILE_SIZE * 4 - self.enemy_distance             
        
class Explosion(pygame.sprite.Sprite): 
    def __init__(self, x, y, scale):
        pygame.sprite.Sprite.__init__(self)
        self.images = []
        for num in range(1,6):
            img = pygame.image.load(f'Question 2/img/explosion/exp{num}.png').convert_alpha()
            img = pygame.transform.scale(img, (int(img.get_width() * scale), int(img.get_height() *scale)))
            self.images.append(img)
        self.frame_index = 0
        self.image = self.images[self.frame_index]
        self.rect = self.image.get_rect()
        self.rect.center = (x,y)
        self.counter = 0
        
    def update(self):
        EXPLOSION_SPEED = 4 # how quickly it will animate
        self.counter += 1
        if self.counter >= EXPLOSION_SPEED:
            self.counter = 0
            self.frame_index += 1
            #check if animation is complete
            if self.frame_index >= len(self.images):
                self.kill()
            else:
                self.image = self.images[self.frame_index]

#create sprite groups
enemy_group = pygame.sprite.Group()
bullet_group = pygame.sprite.Group()
grenade_group = pygame.sprite.Group()
explosion_group = pygame.sprite.Group()
item_box_group = pygame.sprite.Group()

#create item boxes
item_box = ItemBox('Grenade', 100, 260)
item_box_group.add(item_box)
item_box = ItemBox('Health', 700, 260)
item_box_group.add(item_box)
item_box = ItemBox('Ammo', 300, 260)
item_box_group.add(item_box)

player = Soldier('player', 200, 200, 3, 5, 25, 5)
enemy = Soldier('enemy', 400, 250, 3, 5, 25, 0)
enemy2 = Soldier('enemy', 600, 250, 3, 5, 25, 0)
enemy_group.add(enemy)
enemy_group.add(enemy2)

run = True
while run:
    clock.tick(FPS)
    draw_bg()

    player.update()
    player.draw()
    
    #update enemy before drawing
    for enemy in enemy_group:
        enemy.update()
        enemy.draw()

    bullet_group.update()
    grenade_group.update()
    explosion_group.update()
    item_box_group.update()
    bullet_group.draw(screen)
    grenade_group.draw(screen)
    explosion_group.draw(screen)
    item_box_group.draw(screen)

    #update player actions
    if player.alive:
        if shoot:
            player.shoot()
        elif grenade and grenade_thrown== False and player.grenades >0:
            grenade = Grenade(player.rect.centerx + (0.5*player.rect.size[0]*player.direction),\
                              player.rect.top, player.direction)
            grenade_group.add(grenade)
            grenade_thrown = True
            player.grenades -= 1
        if player.in_air:
            player.update_action(2)  #2 = jump
        elif left or right:
            player.update_action(1)  #1 = run
        else:
            player.update_action(0)  #0 = idle
        player.move(left, right)

    for event in pygame.event.get():
        #quit game
        if event.type == pygame.QUIT:
            run = False
        #keyboard presses
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_a:
                left = True
            if event.key == pygame.K_d:
                right = True
            if event.key == pygame.K_q:
                grenade = True
            if event.key == pygame.K_SPACE and player.ammo > 0:
                shoot = True
            if event.key == pygame.K_w and player.alive:
                player.jump = True
            if event.key == pygame.K_ESCAPE:
                run = False

        #keyboard button release
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_a:
                left = False
            if event.key == pygame.K_d:
                right = False
            if event.key == pygame.K_SPACE:
                shoot = False
            if event.key == pygame.K_q:
                grenade = False
                grenade_thrown = False

    pygame.display.update()


pygame.quit()
